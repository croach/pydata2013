This page started out as a bit of code that I wrote for my talk on network science at [PyData 2013][pydata] (Silicon Valley). It was meant to serve as a simple example of how to apply some social network analysis techniques to a real world dataset. After the talk, I decided to get the code cleaned up a bit so that I could release it for anyone who had seen the talk, or just for anyone who happens to have a general interest in the topic. As I worked at cleaning the code up, I started adding a few little features here and there and started to think about how I could make the visualization easier to execute since Matplotlib can sometimes be a bit burdensome to install. The solution was to display the visualization in the browser. This way it could be viewed without needing to install a bunch of third-party Python libraries.

# Quick Overview

The script that I created for the talk shows a social network of one of the houses for a specific session of Congress. The network is created by linking each member of Congress to other members with which they have worked on a at least one bill. The more bills the two members have worked on, the more intense the link is between the two in the visualization. Finally, a dropdown in the upper right corner of the visualization allows you to change the size of the nodes in the graph relative to some measure of their importance within the network. Finally, unlike the script, the graph above only shows one network for the Senate of the 112th Congress. I chose this session specifically simply because it can be considered [the][worst_1] [most][worst_2] [disfunctional][worst_3] session of congress in our nation's history and so I thought it might be an interesting session for us to study.

# Insights

So, now that we have a decent understanding of what the graph above represents, we're ready to dig in and see what we can discover. With that said, make sure that the dropdown in the corner is showing "None Selected", and let's dig in and see what we can see.

## Graph topography

Right off the bat, just by looking at the simple network visualization, without resizing the nodes relative to some measure of importance, we can already take away some interesting tidbits. The first thing I noticed when looking at the graph is that the number of links between the Democrats is greater than the number between their Republican counterparts. In addition, it also appears as if the individual ties themselves are stronger on the Democratic side. Given both of these observations, and your political party affiliation, you could come up with a few different stories to explain these discrepancies. If your vote tends to fall more towards the Democratic side of the aisle, you might say that the Democrats are simply working harder and producing more legislation while the Replublicans are being obstructionists, as always. However, if your political preferences tend to lean a little further right, you could say that the Republicans, having a fundamental belief in small government, are purposefully keeping the number of proposed bills small, and that, of course, quantity does not equal quality.

Political affiliation aside, one thing I think we can all agree on is that there are far too few lines reaching from members of one party to the other. Put simply, this session of Congress just did not know how to work together to accomplish anything. It's no wonder this Congress passed fewer bills into law than any other session of Congress on record all the way back to the end of World War II.

Now, you'll need to take these observations with a grain of salt as I've purposefully cut out all of the links between senators that had a weight of 10 (based on the number of bills both senators collaborated on) or lower in order to make the visualization perform tolerably, and also to make it possible to visually analyze the relationships in the graph. With that taken into account, it could be possible that the republican side of the senate has many more "weak" ties suggesting that they have indeed worked on several bills together, but they tend to work with a multitude of people rather than a select bunch. The same could also be said for the links missing between parties. It's definitely a valid argument that relationships between opposing party members would be weaker than those between members of the same party.

The last thing that I want you to see before we move onto the centrality measurements is the quality of the connections between the legislators. The intensity of each edge in the graph is relative to its weight, so the darker the line, the more bills a pair of legistrators have worked on together. Given that knowledge, you'll notice a couple of things in the graph. First, whenever you hover over a node in the graph, the node, and its immediate neighbors, will be highlighted allowing you to better observe the relationships that the senator behind the node has formed with his/her colleagues. Looking at several nodes this way, you'll no doubt observe a pattern whereby the strongest connection for a node tends to be with the other senator from the same state. Second, one relationship in particular always stands out to me, and that is the one between Sen. Lisa Murkowski [R-AK] and her partner in the senate, Sen. Mark Begich [D-AK]. This one is interesting because you have two senators from the same state who, with the interests of their home state in mind, have formed a strong working relationship with one another despite their opposing party affiliations.

It's interesting to see how much we can learn from a simple network visualization, but we can still take this analysis a step further by taking into account the various measures of importance that the network places on individual nodes. In the next two sections, we'll take another look at the graph through the lens of two simple but useful measurements. We'll start in the next section with the degree of a node.

# Degree

The degree of a node is essentially nothing more than the number of nodes that node is connected to, or, keeping within the realm of our experiment, it's the number of senators each senator has previously worked with. To view the degree, just select it in the dropdown in the upper right corner of the visualization. Once you've switched the visualization to show the degree for each node, you should begin to notice a few additional characteristics of the network.

First, the degree gives us further confirmation of one of our earlier observations, namely that the Democrats seem to have authored more bills during the 112th session of Congress than their Republican peers. Overall, the nodes on the Democrats' side are larger than those of the Republicans, suggesting that they have more working relationships with their colleagues, and from that we can conclude that they have more relationships because they've worked on more bills. The more interesting take away though, is that we can begin to see who the key players in Congress are. As I stated earlier, the larger the node, the more relationships that senator has, and arguably the more influence that senator has as well. So, if you're a member of the Senate hoping to get a bill passed, rather than wasting time hitting up each and every senator for support, you may want to target the hubs (those members with the largest number of connections) and let them work their magic on the colleagues that they've worked with in the past.

With respect to the observations I've made above, I'd again like to point out that you should obviously take each into consideration with a healhty dose of skepticism. Though the degree itself should be fairly unbiased since it's only for one session of Congress and not a cummulative total, it can be assumed that senators that have been in Congress for a while, and who have developed several long standing relationships with their colleagues, will most likely have an advantage over the "rookies" in the Senate, and so will likely have a higher degree. So, the remarks I've made in the last section could actually be highly skewed if the number of experienced players one political party has differs greatly from the other.

Degree is the simplest of all network measurements associated with a node, and as such, can only tell us so much. In my opinion, a more appropriate measure of the importance of a node in a situation such as ours is betweenness. In the next section we'll take yet another look at our graph, this time with nodes resized according to their betweenness score and see what else we can discern abouth the Senate of the 112th Congress.

# Betweeness

The betweenness score is a little harder to describe than degree, especially if you don't come from a math or computer science background, so it's probably best I explain by way of example. Let's say that you're a Democrat who wants to sponsor a somewhat controversial bill that could very well alienate several members of your own party. Given your predicament, you're going to need as much support from the opposing side as you can possibly muster. There's a problem with this situation though, both sides like to keep to themselves. I'm not really going out on a limb here when I say that, cross-party cooperation wasn't necessarily the strongest characteristic of this particular session of congress. So, given your situation, how do you go about getting the most votes from the opposing side with the least amount of effort? Well, you target the members that have the most influence within their party of course. As we've already seen, degree can be a very good indicator of which nodes have a decent amount of influence within the network. However, targeting those nodes with the highest degree may not be the best course of action, since, in many cases, you may just be targeting members who tend to only want to work with other members of their own party. Preferably you want someone who has a large amount of influence, but also a proven track record of working with members from across the aisle. In that case, you may want to take a look at betweenness.

Betweenness is a measure of a node's importance relative to the number of shortest paths on which that node resides. If you're not used to thinking of a network of human relationships as a graph (in the mathematical sense), the concept of a shortest path might seem a bit foreign to you, but don't worry, it's an easy concept to grasp. In fact, if you've ever asked a relative for help in finding a job, you're already quite familiar with the concept. That uncle, or aunt, or family friend that you asked for help, more than likely, had to introduce you to someone else who actually had the power to give you that job, or, at least, to recommend you again to someone higher up the chain. In this scenario, the person you asked for help is on the shortest path between you and the person making the hiring decision, otherwise, you probably would have asked someone else for help. With that example, you're probably starting to see the importance of the betweenness metric, essentially it helps you find the gatekeepers in the network, or those individuals that can most help, or hinder, your ability to form relationships with members of a community to which you do not currently belong. These gatekeeper members of the Senate are who you're looking for since they bridge the divide between parties. To take a look at these gatekeepers, select the Betweenness option from the dropdown in the upper right corner of the graph.

With the nodes resized relative to their betweenness, we get yet another look at who the most influential senators are, and we can make serveral more interesting observations. If we stick with the scenario described above, we immediately see that three senators stand out on the Repbulican side as the gatekeepers in the group: Sens. Marco Rubio, David Vitter, and John Thrune. If I were trying to get my bill passed, I might want to target these three the hardest, because if just one were to support my bill, they would, hopefully, bring a large number of their constituents with them.

Another thing I noticed when making the switch between degree and betweenness is just how little influence the independent senators (the grey nodes) have from a betweeness point of view. Both Sen. Joseph Lieberman and Sen. Bernie Sanders showed a decent amount of influence when we were viewing the degree-based graph, but when viewing the nodes resized according to their betweenness, their importance becomes miniscule. So it would seem, that going indie is not necessarily the best way to win friends and influence people.

Finally, the node that I found to be the most interesting was that of Sen. Olympia Snowe. She continuously shows up on the Democratic side of the network due to her multitude of strong relationships with many Senate Democrats. For this reason, I completely expected her to gain in influence when viewed from the point of view of the betweenness score, however, contrary to my prediction, her influence actually decreased slightly. The best explanation I can come up with for her diminished influence in the betweenness graph is that she was simply too bipartisan. She was so willing to work with the Democrats, that her influence within her own party was severly hindered. Unfortunatley, for Miss Snowe, in a Senate so starkly divided on party lines, the one voice of compromise and bipartisanship is not readily rewarded. This theory seems to make sense since it has been pointed out [many][snowe_1] [times][snowe_2] [now][snow_3] that this lack of willingness to work together lead, at least in part, to her decision to resign.

# The Technical Details (i.e., the tech behind the visualization)

So, that wraps up our analysis of the 112th session of Congress. If you've read this far, and you have an interest in the technical elements behind the analysis above, this section is for you. I'm going to purposefully keep it short since, if you really want to know all the gory details, the code is readily available for your perusal by simply clicking on the ["Fork me on GitHub"][github] link at the top. That said, I want to quickly go through the tech and the process I used, as well as how to use the tools I created, just in case anyone is interested in doing some similar reasearch. Let's start with the technology behind the visualization and analysis.

All of the backend work---aquiring, filtering, and mining the data---was done using a combination of Python and [Networkx][networkx]. The dataset I used was taken from [govtrack.us][govtrack], hence the name of the final script. Govtrack is a really fantastic resource for congressional data, if you're interested in doing any sort analysis of your own on Congress, I can wholeheartedly recommend using this resource. I played around with several other sources of data, but, in the end, I found govtrack to be the easiest and most complete for my needs.

For the visualization of the data, I used two different tools. The first one I used was [matplotlib][matplotlib] mainly just to get a quick view of, and feel for, the data. If you've never used matplotlib before, I really suggest installing it and giving it a try. Most of the python-based data analysis tools that you'll use make use of matplotlib for their visualization needs, and as far as exploratory data analysis goes, it really can't be beat if you're going to use python as your main tool.

Once I had an idea of what the data looked like, I started work on the in-browser visualization. This was done with [Mike Bostock's][bostock] fantastic tool [D3][d3]. I give Mike an extra shout out here, mainly because I borrowed (aka stole) many of the style elements from his multitude of [examples][examples] on the web. So, the look and feel of this page, in addition to the functionality, are all indebted to him.

That covers all of the technology I used to do my analysis, the last thing I wanted to cover here before leaving this section is the govtrack.py script that I created. If you're not necessarily interested in creating your own scripts, but just want to use what I've created to do a similar type of analysis on a different session or house of Congress, this is the place to start. The govtrack.py script allows you to run the analysis with any session or house, and display the results in either matplotlib, or the browser. I believe the script itself is fairly well documented, so I won't go into the details here, simply download the code, install the required packages, and run the script with the '-h' option to see how to use it.

# Conclusion (mention where to find the video of the talk, the slides, the source code)

With the above technical details section complete, we've finally come to the end. There is one final little detail that I want to point out before signing off, and that's the concept of community detection. Look close enough within any social network and you'll always a subset of tight communities. This is a very intuitive concept as all of us already see this each and every day of our existence. Just think for a second about all the different groups you interact with on daily basis: family, friends, neighbors, coworkers, PTA, softball team, etc. Given our penchant for forming small, tight communities, it's no wonder that these communities can be found in just about any social network, and their importance cannot be understated. Though, I didn't cover community detection specifically in this analysis, I did talk about it briefly in my PyData talk. In that brief section, I showed the result of running a community detection algorithm that comes with [Gephi][gephi], a tool I used to generate some of the visuals for the presentation, and discussed the implications that those communities might have on a member trying to get support for a bill. If you're interested in learning more about the results of the community detection step on this session of Congress check out the [full video][talk] of the talk, but suffice it to say, the relationship between Sens. Lisa Murkowski and Mark Begich that I mentioned towards the beginning of this analysis takes on a much more important role when viewed through this lens.


[pydata]: https://vimeo.com/pydata/videos
[talk]: https://vimeo.com/63270822
[worst_1]: http://www.washingtonpost.com/blogs/wonkblog/wp/2012/07/13/13-reasons-why-this-is-the-worst-congress-ever/
[worst_2]: http://www.bloomberg.com/news/2013-01-02/good-riddance-to-rottenest-congress-in-history.html
[worst_3]: http://www.washingtontimes.com/news/2013/jan/9/capitol-hill-least-productive-congress-ever-112th-/?page=all
[snowe_1]: http://truth-out.org/news/item/8160-why-olympia-snowe-really-resigned
[snowe_2]: http://www.thedailybeast.com/articles/2012/03/01/olympia-snowe-quit-senate-to-protest-gop-agenda.html
[snowe_3]: http://articles.washingtonpost.com/2012-03-01/opinions/35450357_1_senate-common-ground-olympia-snowe
[github]: https://github.com/croach/pydata2013
[networkx]: http://networkx.github.io/
[govtrack]: http://www.govtrack.us/
[matplotlib]: http://matplotlib.org/
[bostock]: http://bost.ocks.org/mike/
[d3]: http://d3js.org/
[examples]: http://bl.ocks.org/mbostock
[gephi]: https://gephi.org/